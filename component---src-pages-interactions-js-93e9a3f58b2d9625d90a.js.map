{"version":3,"sources":["webpack:///./src/pages/interactions.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./src/classes/CanvasCircle.js"],"names":["IndexPage","canvas","useRef","animationFrame","circles","mousePosition","x","y","colors","onMoveHandler","e","current","buildCircles","windowWidht","window","innerWidth","windowHeight","innerHeight","width","height","ctx","getContext","clearRect","Array","from","forEach","v","i","radius","Math","random","color","dx","dy","c","Circle","draw","push","useEffect","currentCanvas","addEventListener","animateCircle","animate","requestAnimationFrame","removeEventListener","cancelAnimationFrame","title","ref","style","background","$export","P","fill","toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","CanvasCircle","beginPath","arc","PI","fillStyle","mouseX","mouseY","circleXPosition","circleYPosition","maxRadius","minRadius","floor"],"mappings":"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","file":"component---src-pages-interactions-js-93e9a3f58b2d9625d90a.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Layout from '../components/layout';\nimport Circle from '../classes/CanvasCircle';\n\nimport '../styles/canvas.css';\n\nconst IndexPage = () => {\n  const canvas = useRef(null);\n  const animationFrame = useRef(null);\n  const circles = useRef([]);\n  const mousePosition = useRef({ x: 0, y: 0 });\n  // const colors = ['#F9F9F9', '#CCBDBD', '#EEEEEE', '#E3E3EF', '#F7EAEA'];\n  const colors = ['#DDD0C1', '#E2DBD8', '#FEFEFE', '#FFF6F2', '#F1ECE9'];\n\n  const animateCircle = () => {\n    const ctx = canvas.current.getContext('2d');\n    ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n\n    const { x, y } = mousePosition.current;\n\n    circles.current.forEach(c => {\n      c.animate(ctx, x, y);\n    });\n\n    animationFrame.current = requestAnimationFrame(animateCircle);\n  };\n\n  const onMoveHandler = e => {\n    const { x, y } = e;\n    mousePosition.current = { x, y };\n  };\n\n  const buildCircles = () => {\n    const windowWidht = window.innerWidth;\n    const windowHeight = window.innerHeight;\n\n    canvas.current.width = windowWidht;\n    canvas.current.height = windowHeight;\n    const ctx = canvas.current.getContext('2d');\n    ctx.clearRect(0, 0, windowWidht, windowHeight);\n    circles.current = [];\n\n    Array.from(new Array(windowWidht + windowHeight)).forEach((v, i) => {\n      const radius = Math.random() * 3 + 3;\n      const color = colors[i % 5];\n\n      const x = Math.random() * (windowWidht - radius * 2) + radius + 5;\n      const y = Math.random() * (windowHeight - radius * 2) + radius + 5;\n\n      const dx = (Math.random() < 0.5 ? -1 : 1) * (Math.random() + 0.5);\n      const dy = (Math.random() < 0.5 ? -1 : 1) * (Math.random() + 0.5);\n      const c = new Circle({ x, y, dx, dy, radius, color });\n      c.draw(ctx);\n      circles.current.push(c);\n    });\n  };\n\n  useEffect(() => {\n    const currentCanvas = canvas.current;\n    buildCircles();\n\n    window.addEventListener('resize', buildCircles);\n    canvas.current.addEventListener('mousemove', onMoveHandler);\n    animationFrame.current = animateCircle();\n\n    return () => {\n      window.removeEventListener('resize', buildCircles);\n      currentCanvas.removeEventListener('mousemove', onMoveHandler);\n      cancelAnimationFrame(animationFrame.current);\n    };\n  });\n\n  return (\n    <Layout title=\"Animating\">\n      <canvas ref={canvas} style={{ background: '#151515' }} />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","class CanvasCircle {\n  constructor({ x, y, dx, dy, radius, color }) {\n    this.radius = radius;\n    this.minRadius = radius;\n    this.maxRadius = 30;\n    this.color = color;\n    this.x = Math.floor(x);\n    this.y = Math.floor(y);\n    this.dx = Math.floor(dx);\n    this.dy = Math.floor(dy);\n  }\n\n  draw = ctx => {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  };\n\n  animate = (ctx, mouseX, mouseY) => {\n    if (this.x > window.innerWidth - this.radius || this.x < this.radius) {\n      this.dx = -this.dx;\n    }\n\n    if (this.y > window.innerHeight - this.radius || this.y < this.radius) {\n      this.dy = -this.dy;\n    }\n\n    this.x += this.dx;\n    this.y += this.dy;\n\n    if (mouseX !== undefined && mouseY !== undefined) {\n      const circleXPosition = mouseX - this.x;\n      const circleYPosition = mouseY - this.y;\n\n      if (\n        circleXPosition < 50 &&\n        circleXPosition > -50 &&\n        circleYPosition < 50 &&\n        circleYPosition > -50 &&\n        this.radius <= this.maxRadius\n      ) {\n        this.radius += 1;\n      } else if (this.radius >= this.minRadius) {\n        this.radius -= 1;\n      }\n    }\n\n    this.draw(ctx);\n  };\n}\n\nexport default CanvasCircle;\n"],"sourceRoot":""}